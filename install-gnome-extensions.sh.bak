#!/bin/bash
set -e

MODULE_NAME="gnome-extensions"
EXT_DIR="$HOME/.local/share/gnome-shell/extensions"
TMP_ZIP="/tmp/ext.zip"
GNOME_VERSION=$(gnome-shell --version | awk '{print $3}')
EXTENSIONS=(
  "rounded-window-corners@fxgn"
  "blur-my-shell@aunetx"
  "tilingshell@ferrarodomenico.com"
)
ACTION="${1:-all}"
TO_ENABLE_AFTER_LOGIN=()

install_dependencies() {
  echo "🔧 Installing required packages..."
  sudo apt update
  sudo apt install -y curl unzip jq gnome-shell-extension-prefs
}

reload_gnome_shell() {
  echo ""
  echo "🔁 Extensions have been installed and enabled."
  echo "🚨 To complete activation, please log out and log back in."
  echo ""
}

enable_extension_safely() {
  local uuid="$1"

  if gnome-extensions list | grep -q "$uuid"; then
    echo "✅ Enabling $uuid (already registered)"
    gnome-extensions enable "$uuid" && echo "🟢 $uuid is enabled."
  else
    echo "⚠️ $uuid is not yet registered in GNOME Shell."
    echo "   Will be activated on next login."
    TO_ENABLE_AFTER_LOGIN+=("$uuid")
  fi
}

install_extensions() {
  echo "🧩 Installing GNOME extensions..."
  mkdir -p "$EXT_DIR"

  for EXT_ID in "${EXTENSIONS[@]}"; do
    echo "🌐 Fetching metadata for $EXT_ID..."
    METADATA=$(curl -s "https://extensions.gnome.org/extension-query/?search=${EXT_ID}" | jq -r --arg uuid "$EXT_ID" '.extensions[] | select(.uuid == $uuid)')

    if [[ -z "$METADATA" ]]; then
      echo "❌ Extension $EXT_ID not found."
      continue
    fi

    PK_ID=$(echo "$METADATA" | jq -r '.pk')
    VERSION_JSON=$(curl -s "https://extensions.gnome.org/extension-info/?pk=${PK_ID}&shell_version=${GNOME_VERSION}")
    DL_URL="https://extensions.gnome.org$(echo "$VERSION_JSON" | jq -r '.download_url')"

    echo "⬇️ Downloading $EXT_ID..."
    curl -sL "$DL_URL" -o "$TMP_ZIP"

    TMP_UNPACK=$(mktemp -d)
    unzip -oq "$TMP_ZIP" -d "$TMP_UNPACK"

    METADATA_PATH=$(find "$TMP_UNPACK" -type f -name metadata.json | head -n1)
    if [[ -z "$METADATA_PATH" ]]; then
      echo "❌ metadata.json not found in $EXT_ID"
      continue
    fi

    ACTUAL_UUID=$(jq -r '.uuid' "$METADATA_PATH")
    if [[ -z "$ACTUAL_UUID" || "$ACTUAL_UUID" == "null" ]]; then
      echo "❌ Failed to parse UUID from metadata.json"
      continue
    fi

    echo "📛 UUID: $ACTUAL_UUID"
    DEST="$EXT_DIR/$ACTUAL_UUID"
    EXT_ROOT="$(dirname "$METADATA_PATH")"

    echo "📁 Installing to $DEST"
    rm -rf "$DEST"

    if [[ "$(basename "$EXT_ROOT")" == "$ACTUAL_UUID" ]]; then
      mv "$EXT_ROOT" "$DEST"
    else
      mkdir -p "$DEST"
      cp -r "$EXT_ROOT"/* "$DEST"
    fi

    if [[ -d "$DEST/schemas" ]]; then
      echo "🔧 Compiling GSettings schemas..."
      glib-compile-schemas "$DEST/schemas"
    fi

    enable_extension_safely "$ACTUAL_UUID"
  done

  # Apply all pending UUIDs to enabled-extensions only once
  if [[ ${#TO_ENABLE_AFTER_LOGIN[@]} -gt 0 ]]; then
    echo "💾 Updating enabled-extensions GSettings list..."
    CURRENT=$(gsettings get org.gnome.shell enabled-extensions 2>/dev/null | jq -c '.' 2>/dev/null || echo '[]')
    for uuid in "${TO_ENABLE_AFTER_LOGIN[@]}"; do
      CURRENT=$(echo "$CURRENT" | jq -c "unique + [\"$uuid\"]")
    done
    gsettings set org.gnome.shell enabled-extensions "$CURRENT"
  fi

  reload_gnome_shell
}

config_extensions() {
  echo "⚙️ No extra config for $MODULE_NAME."
}

clean_extensions() {
  echo "🧼 Removing installed extensions..."

  for EXT_ID in "${EXTENSIONS[@]}"; do
    echo "🌐 Fetching metadata for $EXT_ID..."
    METADATA=$(curl -s "https://extensions.gnome.org/extension-query/?search=${EXT_ID}" | jq -r --arg uuid "$EXT_ID" '.extensions[] | select(.uuid == $uuid)')

    if [[ -z "$METADATA" ]]; then
      echo "⚠️ Skipping unknown extension $EXT_ID"
      continue
    fi

    PK_ID=$(echo "$METADATA" | jq -r '.pk')
    VERSION_JSON=$(curl -s "https://extensions.gnome.org/extension-info/?pk=${PK_ID}&shell_version=${GNOME_VERSION}")
    DL_URL="https://extensions.gnome.org$(echo "$VERSION_JSON" | jq -r '.download_url')"

    curl -sL "$DL_URL" -o "$TMP_ZIP"
    TMP_UNPACK=$(mktemp -d)
    unzip -oq "$TMP_ZIP" -d "$TMP_UNPACK"

    METADATA_PATH=$(find "$TMP_UNPACK" -type f -name metadata.json | head -n1)
    if [[ -z "$METADATA_PATH" ]]; then
      echo "❌ metadata.json not found in $EXT_ID"
      continue
    fi

    ACTUAL_UUID=$(jq -r '.uuid' "$METADATA_PATH")
    if [[ -n "$ACTUAL_UUID" && "$ACTUAL_UUID" != "null" ]]; then
      echo "❌ Removing $ACTUAL_UUID"
      gnome-extensions disable "$ACTUAL_UUID" 2>/dev/null || true
      rm -rf "$EXT_DIR/$ACTUAL_UUID"
    fi
  done
}

# === Main ===
case "$ACTION" in
  install)
    install_dependencies
    install_extensions
    ;;
  config) config_extensions ;;
  clean) clean_extensions ;;
  all)
    install_dependencies
    install_extensions
    config_extensions
    ;;
  *)
    echo "Usage: $0 [install|config|clean|all]"
    exit 1
    ;;
esac

